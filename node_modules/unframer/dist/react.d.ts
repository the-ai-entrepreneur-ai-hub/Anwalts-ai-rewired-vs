import { ComponentPropsWithoutRef, ComponentType } from 'react';
import { defaultBreakpointSizes } from './css.js';
export type UnframerBreakpoint = keyof typeof defaultBreakpointSizes;
/**
 * @deprecated Use styles.css import instead
 */
export declare function FramerStyles({ Components }: {
    Components?: any[] | undefined;
}): any;
export declare const WithFramerBreakpoints: <T extends ComponentType<{
    variant?: any;
    className?: string;
}>>({ Component, variants: _breakpointsMap, ...rest }: {
    Component: T;
    variants: Record<UnframerBreakpoint, ComponentPropsWithoutRef<T>["variant"]>;
} & Omit<ComponentPropsWithoutRef<T>, "variant">) => any;
import React from 'react';
export declare function ResolveLinksAdapted({ links, children }: {
    links: any;
    children: any;
}): any;
export declare function AdaptedLink({ href, nodeId, openInNewTab, smoothScroll, children, ...rest }: {
    [x: string]: any;
    href: any;
    nodeId: any;
    openInNewTab: any;
    smoothScroll: any;
    children: any;
}): import("react/jsx-runtime").JSX.Element;
export declare function ContextProviders({ locale: locale_, children, framerSiteId, routes, locales, }: {
    locale: any;
    children: any;
    framerSiteId: any;
    routes: any;
    locales: any;
}): import("react/jsx-runtime").JSX.Element;
type UnframerProviderProps = {
    /**
     * Optional function to handle client-side navigation.
     * You can provide a navigation function such as one from React Router's `useNavigate`
     * or Next.js's `useRouter().push`, for example:
     *
     * ```tsx
     * // Using React Router:
     * import { useNavigate } from "react-router-dom";
     * const navigate = useNavigate();
     *
     * <UnframerProvider navigate={navigate}>...</UnframerProvider>
     *
     * // Using Next.js:
     * import { useRouter } from "next/navigation";
     * const router = useRouter();
     * const navigate = (url: string) => router.push(url);
     *
     * <UnframerProvider navigate={navigate}>...</UnframerProvider>
     * ```
     */
    navigate?: (url: string) => void;
    /**
     * The locale slug for the language, e.g. "de" for German, "it" for Italian, etc.
     * This should be a short identifier (typically two or more lowercase letters)
     * that uniquely identifies the active language/region. Used for language resolution,
     * translations, routing, etc.
     * Examples:
     *   - "en" for English
     *   - "de" for German
     *   - "it" for Italian
     *   - "fr" for French
     *   - "es" for Spanish
     */
    locale?: string;
    children: React.ReactNode;
};
export declare function UnframerProvider(props: UnframerProviderProps): import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=react.d.ts.map