import type { PluginObj } from '@babel/core';
import type * as BabelTypes from '@babel/types';
/**
 * Babel plugin that injects typed-documentation (typedoc/JSDoc) comments into the
 * generated JSX files.
 *
 * The plugin receives, via its options, the comment blocks that must be added
 * and places them in three different locations:
 *
 *   1. `headerComment` – added **once** at the very top of the file, right after
 *      any `"use client"` / `"use strict"` (directive literals) that may be
 *      present.
 *   2. `responsiveComment` – added immediately **before** the statement that
 *      assigns to the `.Responsive` static member (i.e.
 *      `Component.Responsive = …`).
 *   3. `defaultExportComment` – added **before** the default export declaration
 *      so that the exported value bears the correct `@type` annotation.
 *
 * The actual _content_ of the comments is produced elsewhere
 * (in the logic that previously generated `.d.ts` files) and handed to this
 * plugin through its options, therefore the plugin only concerns itself with
 * finding the right AST nodes and attaching the supplied comments.
 *
 * Because this file lives in `src/`, it is written in ESM and must be imported
 * with the `.js` extension once transpiled.
 */
interface InjectTypedocOptions {
    /** Complete comment block, e.g. `/** … *\/`  */
    headerComment: string;
    /** `/** … *\/` that documents the `.Responsive` member. Optional. */
    responsiveComment?: string;
    /** `/** … *\/` for the default export. Optional. */
    defaultExportComment?: string;
}
export declare function babelPluginTypedoc(options: InjectTypedocOptions): ({ types: t }: {
    types: typeof BabelTypes;
}) => PluginObj;
export {};
//# sourceMappingURL=babel-typedoc.d.ts.map