import { BuildResult, type BuildOptions } from 'esbuild';
import { Config } from './cli';
import { ComponentFontBundle } from './css.js';
import { PropertyControls } from './framer.js';
export type StyleToken = {
    id: string;
    name?: string | null;
    lightColor: string;
    darkColor: string;
};
export declare function bundle({ config, cwd: out, watch, signal, }: {
    config: Config;
    cwd: string;
    watch?: boolean;
    signal?: AbortSignal;
}): Promise<{
    result: BundleResult;
    rebuild: () => Promise<BundleResult>;
    buildContext: {
        rebuild(): Promise<BuildResult<BuildOptions>>;
        cancel(): void;
        dispose(): void;
    } | import("esbuild").BuildContext<{
        absWorkingDir: string;
        entryPoints: {
            in: string;
            out: string;
        }[];
        jsx: "automatic";
        bundle: true;
        platform: "browser";
        metafile: true;
        format: "esm";
        minify: false;
        treeShaking: true;
        splitting: true;
        logLevel: "error";
        pure: string[];
        external: string[];
        chunkNames: string;
        plugins: import("esbuild").Plugin[];
        write: false;
        outdir: string;
    }>;
}>;
export declare function resolvePackageVersion({ cwd, pkg }: {
    cwd: any;
    pkg: any;
}): Promise<string | undefined>;
export declare function resolvePackage({ cwd, pkg }: {
    cwd: any;
    pkg: any;
}): Promise<boolean>;
export declare function getDarkModeSelector(opts: {
    darkModeType?: 'class' | 'media';
    content: string;
}): string;
export declare function getStyleTokensCss(tokens: StyleToken[], darkModeType?: 'class' | 'media'): string;
export declare function findRelativeLinks(text: string): number[];
export declare function extractPropControlsUnsafe(filename: any, name: any): Promise<{
    propertyControls?: PropertyControls;
    fonts?: ComponentFontBundle[];
}>;
export declare function parsePropertyControls(code: string): string | null;
type ExtractedTokenInfo = {
    tokenName: string;
    metadata?: Record<string, any>;
    defaultValue: string;
};
export declare function extractTokenInfo(code: string): ExtractedTokenInfo[];
export declare function indentWithTabs(str: string, tabs: string): string;
export declare function createExampleComponentCode({ outDir, config, }: {
    outDir: string;
    config: Config;
}): Promise<{
    outDirForExample: string;
    exampleCode: string;
}>;
type BundleResult = {
    components: Array<{
        componentPathSlug: string;
        name: string;
        url: string;
        componentName: string;
        propertyControls?: PropertyControls;
    }>;
};
/**
 * Compares two semantic version strings.
 * Returns true if versionB is greater than versionA.
 * Handles x.y.z, x.y, x, and optional pre-release (-alpha, etc).
 */
export declare function isVersionGreater(versionA: string, versionB: string): boolean;
export {};
//# sourceMappingURL=exporter.d.ts.map