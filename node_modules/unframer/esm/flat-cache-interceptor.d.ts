import { Writable } from 'node:stream';
import type CacheHandler from 'undici/types/cache-interceptor.js';
type CacheKey = CacheHandler.CacheKey;
type CacheValue = CacheHandler.CacheValue;
type GetResult = CacheHandler.GetResult;
type CacheStore = CacheHandler.CacheStore;
/**
 * A CacheStore that persists each entry as separate files in os.tmpdir()/.unframer.
 * Each cache entry creates a .json file for metadata and a .bin file for the body.
 * It satisfies the exact same interface that `MemoryCacheStore` and
 * `SqliteCacheStore` implement inside Undici (see cache-interceptor.d.ts).
 */
export declare class FlatCacheStore implements CacheStore {
    private readonly cacheDir;
    constructor({ cacheDir }: {
        cacheDir: any;
    });
    private ensureCacheDir;
    private getFileHash;
    private getFilePaths;
    /** Read a cached response (metadata + body) */
    get(key: CacheKey): Promise<GetResult | undefined>;
    /** Return a writable stream so the interceptor can pipe the body into us */
    createWriteStream(key: CacheKey, meta: CacheValue): Writable;
    /** Delete one entry */
    delete(key: CacheKey): Promise<void>;
}
export {};
//# sourceMappingURL=flat-cache-interceptor.d.ts.map