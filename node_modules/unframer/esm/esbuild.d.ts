import { fetch } from 'undici';
import { Plugin } from 'esbuild';
export declare const defaultExternalPackages: string[];
export declare const replaceWebPageIds: ({ elements, code, }: {
    elements: {
        webPageId: string;
        path: string;
    }[];
    code: string;
}) => string;
export declare function esbuildPluginBundleDependencies({ signal, externalPackages, externalizeNpm, outDir, onMissingPackage, onCollectMissingPackage, }: {
    signal?: AbortSignal | undefined;
    externalPackages?: string[] | undefined;
    externalizeNpm?: boolean | undefined;
    outDir: any;
    onMissingPackage?: ((pkg: string) => void) | undefined;
    onCollectMissingPackage?: ((pkg: string) => void) | undefined;
}): Plugin;
export declare function resolveRedirect({ redirectCache, signal, url, }: {
    url?: string;
    redirectCache?: any;
    signal?: AbortSignal;
}): Promise<any>;
export declare function recursiveResolveRedirect(url?: string, signal?: AbortSignal): Promise<string | undefined>;
export declare const fetchWithRetry: typeof fetch;
export declare function retryTwice<F extends Function>(fn: Function): Function;
export declare function getPackageName(importPath: string): string;
//# sourceMappingURL=esbuild.d.ts.map