import { MiddlewareHandler } from './types.ts';
type Env = {};
type Context<E extends Env = Env> = {};
type Data = any;
export type ServeStaticOptions<E extends Env = Env> = {
    root?: string;
    mimes?: Record<string, string>;
    onNotFound?: (path: string, c: Context<E>) => void | Promise<void>;
};
/**
 * This middleware is not directly used by the user. Create a wrapper specifying `getContent()` by the environment such as Deno or Bun.
 */
export declare const serveStatic: <E extends Env = Env>(options: ServeStaticOptions<E> & {
    getContent: (path: string, c: Context<E>) => Data | Response | null | Promise<Data | Response | null>;
    pathResolve?: (path: string) => string;
    isDir?: (path: string) => boolean | undefined | Promise<boolean | undefined>;
}) => MiddlewareHandler;
export declare const getMimeType: (filename: string, mimes2?: Record<string, string>) => string | undefined;
export declare const getExtension: (mimeType: string) => string | undefined;
type FilePathOptions = {
    filename: string;
    root?: string;
    defaultDocument?: string;
};
export declare const getFilePath: (options: FilePathOptions) => string | undefined;
export declare const getFilePathWithoutDefaultDocument: (options: Omit<FilePathOptions, "defaultDocument">) => string | undefined;
export {};
//# sourceMappingURL=static.d.ts.map