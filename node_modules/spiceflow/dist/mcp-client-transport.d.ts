import { Transport } from '@modelcontextprotocol/sdk/shared/transport.js';
import { JSONRPCMessage } from '@modelcontextprotocol/sdk/types.js';
export type SpiceflowClientTransportOptions = {
    fetch?: FetchType;
    url: string;
};
export type FetchType = (input: Request) => Promise<Response>;
export declare class FetchMCPCLientTransport implements Transport {
    private _endpoint?;
    private sseUrl;
    private _abortController;
    fetch: FetchType;
    onmessage?: (message: JSONRPCMessage) => void;
    onerror?: (error: Error) => void;
    onclose?: () => void;
    constructor(opts: SpiceflowClientTransportOptions);
    onEndpointMessage: (endpoint: URL) => void;
    start(): Promise<void>;
    log(...x: any[]): void;
    consumeEvents(): Promise<void>;
    catch(err: any): void;
    private _commonHeaders;
    /**
     * Sends a JSON-RPC message by POSTing to the negotiated endpoint.
     * Must call start() first so that endpoint is set.
     */
    send(message: JSONRPCMessage): Promise<void>;
    /**
     * Aborts the SSE stream and notifies onclose.
     */
    close(): Promise<void>;
    _protocolVersion?: any;
    setProtocolVersion(version: string): void;
}
//# sourceMappingURL=mcp-client-transport.d.ts.map