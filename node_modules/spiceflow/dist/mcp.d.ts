import { SSEServerTransportSpiceflow } from './mcp-transport.ts';
import { AnySpiceflow, Spiceflow } from './spiceflow.ts';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
/**
 * Add MCP tools to an existing MCP server from a Spiceflow app
 * @example
 * ```ts
 * await addMcpTools({
 *   mcpServer,
 *   app,
 *   ignorePaths: ['/sse', '/mcp']
 * })
 * ```
 */
export declare function addMcpTools<const App extends AnySpiceflow, Paths extends string = App extends Spiceflow<any, any, any, any, any, any, infer RoutePaths> ? RoutePaths : string>({ mcpServer, app, ignorePaths, onlyPaths, }: {
    mcpServer: McpServer;
    app: App;
    ignorePaths: Paths[];
    onlyPaths?: Paths[];
}): Promise<McpServer>;
export declare const mcp: <Path extends string = "/mcp">({ path, name, version, transports, }?: {
    path?: Path | undefined;
    name?: string | undefined;
    version?: string | undefined;
    transports?: Map<string, SSEServerTransportSpiceflow> | undefined;
}) => Spiceflow<"", true, {
    state: {};
}, {
    type: {};
    error: {};
}, {
    schema: {};
    macro: {};
    macroFn: {};
}, {
    [x: string]: {
        get: {
            request: unknown;
            params: {};
            query: unknown;
            response: {
                [x: number]: any;
                200: any;
            };
        };
    };
} & {
    _mcp_config: {
        get: {
            request: unknown;
            params: {};
            query: unknown;
            response: {
                200: {
                    name: string;
                    version: string;
                    path: Path;
                };
            };
        };
    };
} & {
    [x: string]: {
        post: {
            request: unknown;
            params: {};
            query: unknown;
            response: {
                200: Response | "ok";
            };
        };
    };
} & import("./types.ts").CreateClient<`${Path extends "/" ? "/index" : Path extends "" ? Path : Path extends `/${string}` ? Path : Path}`, {
    get: {
        request: unknown;
        params: { [Param in import("./types.ts").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("./types.ts").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; } extends infer T ? { [K in keyof T]: ({ [Param in import("./types.ts").GetPathParameter<Path> as Param extends `${string}?` ? never : Param]: string; } & { [Param_1 in import("./types.ts").GetPathParameter<Path> as Param_1 extends `${infer OptionalParam}?` ? OptionalParam : never]?: string | undefined; })[K]; } : never;
        query: unknown;
        response: {
            [x: number]: any;
            200: any;
        };
    };
}>, string>;
//# sourceMappingURL=mcp.d.ts.map